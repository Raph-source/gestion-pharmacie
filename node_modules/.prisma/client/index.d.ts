
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Pharmacien
 * 
 */
export type Pharmacien = $Result.DefaultSelection<Prisma.$PharmacienPayload>
/**
 * Model Produit
 * 
 */
export type Produit = $Result.DefaultSelection<Prisma.$ProduitPayload>
/**
 * Model Facture
 * 
 */
export type Facture = $Result.DefaultSelection<Prisma.$FacturePayload>
/**
 * Model FactureProduit
 * 
 */
export type FactureProduit = $Result.DefaultSelection<Prisma.$FactureProduitPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Pharmaciens
 * const pharmaciens = await prisma.pharmacien.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Pharmaciens
   * const pharmaciens = await prisma.pharmacien.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.pharmacien`: Exposes CRUD operations for the **Pharmacien** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pharmaciens
    * const pharmaciens = await prisma.pharmacien.findMany()
    * ```
    */
  get pharmacien(): Prisma.PharmacienDelegate<ExtArgs>;

  /**
   * `prisma.produit`: Exposes CRUD operations for the **Produit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produits
    * const produits = await prisma.produit.findMany()
    * ```
    */
  get produit(): Prisma.ProduitDelegate<ExtArgs>;

  /**
   * `prisma.facture`: Exposes CRUD operations for the **Facture** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Factures
    * const factures = await prisma.facture.findMany()
    * ```
    */
  get facture(): Prisma.FactureDelegate<ExtArgs>;

  /**
   * `prisma.factureProduit`: Exposes CRUD operations for the **FactureProduit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FactureProduits
    * const factureProduits = await prisma.factureProduit.findMany()
    * ```
    */
  get factureProduit(): Prisma.FactureProduitDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.0.0
   * Query Engine version: 5dbef10bdbfb579e07d35cc85fb1518d357cb99e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Pharmacien: 'Pharmacien',
    Produit: 'Produit',
    Facture: 'Facture',
    FactureProduit: 'FactureProduit'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "pharmacien" | "produit" | "facture" | "factureProduit"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Pharmacien: {
        payload: Prisma.$PharmacienPayload<ExtArgs>
        fields: Prisma.PharmacienFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PharmacienFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PharmacienFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          findFirst: {
            args: Prisma.PharmacienFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PharmacienFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          findMany: {
            args: Prisma.PharmacienFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>[]
          }
          create: {
            args: Prisma.PharmacienCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          createMany: {
            args: Prisma.PharmacienCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PharmacienCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>[]
          }
          delete: {
            args: Prisma.PharmacienDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          update: {
            args: Prisma.PharmacienUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          deleteMany: {
            args: Prisma.PharmacienDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PharmacienUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.PharmacienUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PharmacienPayload>
          }
          aggregate: {
            args: Prisma.PharmacienAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePharmacien>
          }
          groupBy: {
            args: Prisma.PharmacienGroupByArgs<ExtArgs>
            result: $Utils.Optional<PharmacienGroupByOutputType>[]
          }
          count: {
            args: Prisma.PharmacienCountArgs<ExtArgs>
            result: $Utils.Optional<PharmacienCountAggregateOutputType> | number
          }
        }
      }
      Produit: {
        payload: Prisma.$ProduitPayload<ExtArgs>
        fields: Prisma.ProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findFirst: {
            args: Prisma.ProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          findMany: {
            args: Prisma.ProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          create: {
            args: Prisma.ProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          createMany: {
            args: Prisma.ProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProduitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>[]
          }
          delete: {
            args: Prisma.ProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          update: {
            args: Prisma.ProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          deleteMany: {
            args: Prisma.ProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProduitPayload>
          }
          aggregate: {
            args: Prisma.ProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduit>
          }
          groupBy: {
            args: Prisma.ProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProduitCountArgs<ExtArgs>
            result: $Utils.Optional<ProduitCountAggregateOutputType> | number
          }
        }
      }
      Facture: {
        payload: Prisma.$FacturePayload<ExtArgs>
        fields: Prisma.FactureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FactureFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FactureFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          findFirst: {
            args: Prisma.FactureFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FactureFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          findMany: {
            args: Prisma.FactureFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>[]
          }
          create: {
            args: Prisma.FactureCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          createMany: {
            args: Prisma.FactureCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FactureCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>[]
          }
          delete: {
            args: Prisma.FactureDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          update: {
            args: Prisma.FactureUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          deleteMany: {
            args: Prisma.FactureDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FactureUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FactureUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FacturePayload>
          }
          aggregate: {
            args: Prisma.FactureAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFacture>
          }
          groupBy: {
            args: Prisma.FactureGroupByArgs<ExtArgs>
            result: $Utils.Optional<FactureGroupByOutputType>[]
          }
          count: {
            args: Prisma.FactureCountArgs<ExtArgs>
            result: $Utils.Optional<FactureCountAggregateOutputType> | number
          }
        }
      }
      FactureProduit: {
        payload: Prisma.$FactureProduitPayload<ExtArgs>
        fields: Prisma.FactureProduitFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FactureProduitFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FactureProduitFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          findFirst: {
            args: Prisma.FactureProduitFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FactureProduitFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          findMany: {
            args: Prisma.FactureProduitFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>[]
          }
          create: {
            args: Prisma.FactureProduitCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          createMany: {
            args: Prisma.FactureProduitCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FactureProduitCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>[]
          }
          delete: {
            args: Prisma.FactureProduitDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          update: {
            args: Prisma.FactureProduitUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          deleteMany: {
            args: Prisma.FactureProduitDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FactureProduitUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.FactureProduitUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FactureProduitPayload>
          }
          aggregate: {
            args: Prisma.FactureProduitAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFactureProduit>
          }
          groupBy: {
            args: Prisma.FactureProduitGroupByArgs<ExtArgs>
            result: $Utils.Optional<FactureProduitGroupByOutputType>[]
          }
          count: {
            args: Prisma.FactureProduitCountArgs<ExtArgs>
            result: $Utils.Optional<FactureProduitCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ProduitCountOutputType
   */

  export type ProduitCountOutputType = {
    produits: number
  }

  export type ProduitCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | ProduitCountOutputTypeCountProduitsArgs
  }

  // Custom InputTypes
  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProduitCountOutputType
     */
    select?: ProduitCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProduitCountOutputType without action
   */
  export type ProduitCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureProduitWhereInput
  }


  /**
   * Count Type FactureCountOutputType
   */

  export type FactureCountOutputType = {
    produits: number
  }

  export type FactureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | FactureCountOutputTypeCountProduitsArgs
  }

  // Custom InputTypes
  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureCountOutputType
     */
    select?: FactureCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FactureCountOutputType without action
   */
  export type FactureCountOutputTypeCountProduitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureProduitWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Pharmacien
   */

  export type AggregatePharmacien = {
    _count: PharmacienCountAggregateOutputType | null
    _avg: PharmacienAvgAggregateOutputType | null
    _sum: PharmacienSumAggregateOutputType | null
    _min: PharmacienMinAggregateOutputType | null
    _max: PharmacienMaxAggregateOutputType | null
  }

  export type PharmacienAvgAggregateOutputType = {
    id: number | null
  }

  export type PharmacienSumAggregateOutputType = {
    id: number | null
  }

  export type PharmacienMinAggregateOutputType = {
    id: number | null
    pseudo: string | null
    mdp: string | null
  }

  export type PharmacienMaxAggregateOutputType = {
    id: number | null
    pseudo: string | null
    mdp: string | null
  }

  export type PharmacienCountAggregateOutputType = {
    id: number
    pseudo: number
    mdp: number
    _all: number
  }


  export type PharmacienAvgAggregateInputType = {
    id?: true
  }

  export type PharmacienSumAggregateInputType = {
    id?: true
  }

  export type PharmacienMinAggregateInputType = {
    id?: true
    pseudo?: true
    mdp?: true
  }

  export type PharmacienMaxAggregateInputType = {
    id?: true
    pseudo?: true
    mdp?: true
  }

  export type PharmacienCountAggregateInputType = {
    id?: true
    pseudo?: true
    mdp?: true
    _all?: true
  }

  export type PharmacienAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pharmacien to aggregate.
     */
    where?: PharmacienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmaciens to fetch.
     */
    orderBy?: PharmacienOrderByWithRelationInput | PharmacienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PharmacienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmaciens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmaciens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pharmaciens
    **/
    _count?: true | PharmacienCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PharmacienAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PharmacienSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PharmacienMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PharmacienMaxAggregateInputType
  }

  export type GetPharmacienAggregateType<T extends PharmacienAggregateArgs> = {
        [P in keyof T & keyof AggregatePharmacien]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePharmacien[P]>
      : GetScalarType<T[P], AggregatePharmacien[P]>
  }




  export type PharmacienGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PharmacienWhereInput
    orderBy?: PharmacienOrderByWithAggregationInput | PharmacienOrderByWithAggregationInput[]
    by: PharmacienScalarFieldEnum[] | PharmacienScalarFieldEnum
    having?: PharmacienScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PharmacienCountAggregateInputType | true
    _avg?: PharmacienAvgAggregateInputType
    _sum?: PharmacienSumAggregateInputType
    _min?: PharmacienMinAggregateInputType
    _max?: PharmacienMaxAggregateInputType
  }

  export type PharmacienGroupByOutputType = {
    id: number
    pseudo: string
    mdp: string
    _count: PharmacienCountAggregateOutputType | null
    _avg: PharmacienAvgAggregateOutputType | null
    _sum: PharmacienSumAggregateOutputType | null
    _min: PharmacienMinAggregateOutputType | null
    _max: PharmacienMaxAggregateOutputType | null
  }

  type GetPharmacienGroupByPayload<T extends PharmacienGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PharmacienGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PharmacienGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PharmacienGroupByOutputType[P]>
            : GetScalarType<T[P], PharmacienGroupByOutputType[P]>
        }
      >
    >


  export type PharmacienSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pseudo?: boolean
    mdp?: boolean
  }, ExtArgs["result"]["pharmacien"]>

  export type PharmacienSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    pseudo?: boolean
    mdp?: boolean
  }, ExtArgs["result"]["pharmacien"]>

  export type PharmacienSelectScalar = {
    id?: boolean
    pseudo?: boolean
    mdp?: boolean
  }


  export type $PharmacienPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pharmacien"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      pseudo: string
      mdp: string
    }, ExtArgs["result"]["pharmacien"]>
    composites: {}
  }

  type PharmacienGetPayload<S extends boolean | null | undefined | PharmacienDefaultArgs> = $Result.GetResult<Prisma.$PharmacienPayload, S>

  type PharmacienCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PharmacienFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PharmacienCountAggregateInputType | true
    }

  export interface PharmacienDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pharmacien'], meta: { name: 'Pharmacien' } }
    /**
     * Find zero or one Pharmacien that matches the filter.
     * @param {PharmacienFindUniqueArgs} args - Arguments to find a Pharmacien
     * @example
     * // Get one Pharmacien
     * const pharmacien = await prisma.pharmacien.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PharmacienFindUniqueArgs>(args: SelectSubset<T, PharmacienFindUniqueArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Pharmacien that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PharmacienFindUniqueOrThrowArgs} args - Arguments to find a Pharmacien
     * @example
     * // Get one Pharmacien
     * const pharmacien = await prisma.pharmacien.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PharmacienFindUniqueOrThrowArgs>(args: SelectSubset<T, PharmacienFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Pharmacien that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienFindFirstArgs} args - Arguments to find a Pharmacien
     * @example
     * // Get one Pharmacien
     * const pharmacien = await prisma.pharmacien.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PharmacienFindFirstArgs>(args?: SelectSubset<T, PharmacienFindFirstArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Pharmacien that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienFindFirstOrThrowArgs} args - Arguments to find a Pharmacien
     * @example
     * // Get one Pharmacien
     * const pharmacien = await prisma.pharmacien.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PharmacienFindFirstOrThrowArgs>(args?: SelectSubset<T, PharmacienFindFirstOrThrowArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Pharmaciens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pharmaciens
     * const pharmaciens = await prisma.pharmacien.findMany()
     * 
     * // Get first 10 Pharmaciens
     * const pharmaciens = await prisma.pharmacien.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const pharmacienWithIdOnly = await prisma.pharmacien.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PharmacienFindManyArgs>(args?: SelectSubset<T, PharmacienFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Pharmacien.
     * @param {PharmacienCreateArgs} args - Arguments to create a Pharmacien.
     * @example
     * // Create one Pharmacien
     * const Pharmacien = await prisma.pharmacien.create({
     *   data: {
     *     // ... data to create a Pharmacien
     *   }
     * })
     * 
     */
    create<T extends PharmacienCreateArgs>(args: SelectSubset<T, PharmacienCreateArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Pharmaciens.
     * @param {PharmacienCreateManyArgs} args - Arguments to create many Pharmaciens.
     * @example
     * // Create many Pharmaciens
     * const pharmacien = await prisma.pharmacien.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PharmacienCreateManyArgs>(args?: SelectSubset<T, PharmacienCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Pharmaciens and returns the data saved in the database.
     * @param {PharmacienCreateManyAndReturnArgs} args - Arguments to create many Pharmaciens.
     * @example
     * // Create many Pharmaciens
     * const pharmacien = await prisma.pharmacien.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Pharmaciens and only return the `id`
     * const pharmacienWithIdOnly = await prisma.pharmacien.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PharmacienCreateManyAndReturnArgs>(args?: SelectSubset<T, PharmacienCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Pharmacien.
     * @param {PharmacienDeleteArgs} args - Arguments to delete one Pharmacien.
     * @example
     * // Delete one Pharmacien
     * const Pharmacien = await prisma.pharmacien.delete({
     *   where: {
     *     // ... filter to delete one Pharmacien
     *   }
     * })
     * 
     */
    delete<T extends PharmacienDeleteArgs>(args: SelectSubset<T, PharmacienDeleteArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Pharmacien.
     * @param {PharmacienUpdateArgs} args - Arguments to update one Pharmacien.
     * @example
     * // Update one Pharmacien
     * const pharmacien = await prisma.pharmacien.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PharmacienUpdateArgs>(args: SelectSubset<T, PharmacienUpdateArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Pharmaciens.
     * @param {PharmacienDeleteManyArgs} args - Arguments to filter Pharmaciens to delete.
     * @example
     * // Delete a few Pharmaciens
     * const { count } = await prisma.pharmacien.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PharmacienDeleteManyArgs>(args?: SelectSubset<T, PharmacienDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pharmaciens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pharmaciens
     * const pharmacien = await prisma.pharmacien.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PharmacienUpdateManyArgs>(args: SelectSubset<T, PharmacienUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pharmacien.
     * @param {PharmacienUpsertArgs} args - Arguments to update or create a Pharmacien.
     * @example
     * // Update or create a Pharmacien
     * const pharmacien = await prisma.pharmacien.upsert({
     *   create: {
     *     // ... data to create a Pharmacien
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pharmacien we want to update
     *   }
     * })
     */
    upsert<T extends PharmacienUpsertArgs>(args: SelectSubset<T, PharmacienUpsertArgs<ExtArgs>>): Prisma__PharmacienClient<$Result.GetResult<Prisma.$PharmacienPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Pharmaciens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienCountArgs} args - Arguments to filter Pharmaciens to count.
     * @example
     * // Count the number of Pharmaciens
     * const count = await prisma.pharmacien.count({
     *   where: {
     *     // ... the filter for the Pharmaciens we want to count
     *   }
     * })
    **/
    count<T extends PharmacienCountArgs>(
      args?: Subset<T, PharmacienCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PharmacienCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pharmacien.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PharmacienAggregateArgs>(args: Subset<T, PharmacienAggregateArgs>): Prisma.PrismaPromise<GetPharmacienAggregateType<T>>

    /**
     * Group by Pharmacien.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PharmacienGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PharmacienGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PharmacienGroupByArgs['orderBy'] }
        : { orderBy?: PharmacienGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PharmacienGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPharmacienGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pharmacien model
   */
  readonly fields: PharmacienFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pharmacien.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PharmacienClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Pharmacien model
   */ 
  interface PharmacienFieldRefs {
    readonly id: FieldRef<"Pharmacien", 'Int'>
    readonly pseudo: FieldRef<"Pharmacien", 'String'>
    readonly mdp: FieldRef<"Pharmacien", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Pharmacien findUnique
   */
  export type PharmacienFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter, which Pharmacien to fetch.
     */
    where: PharmacienWhereUniqueInput
  }

  /**
   * Pharmacien findUniqueOrThrow
   */
  export type PharmacienFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter, which Pharmacien to fetch.
     */
    where: PharmacienWhereUniqueInput
  }

  /**
   * Pharmacien findFirst
   */
  export type PharmacienFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter, which Pharmacien to fetch.
     */
    where?: PharmacienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmaciens to fetch.
     */
    orderBy?: PharmacienOrderByWithRelationInput | PharmacienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pharmaciens.
     */
    cursor?: PharmacienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmaciens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmaciens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pharmaciens.
     */
    distinct?: PharmacienScalarFieldEnum | PharmacienScalarFieldEnum[]
  }

  /**
   * Pharmacien findFirstOrThrow
   */
  export type PharmacienFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter, which Pharmacien to fetch.
     */
    where?: PharmacienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmaciens to fetch.
     */
    orderBy?: PharmacienOrderByWithRelationInput | PharmacienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pharmaciens.
     */
    cursor?: PharmacienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmaciens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmaciens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pharmaciens.
     */
    distinct?: PharmacienScalarFieldEnum | PharmacienScalarFieldEnum[]
  }

  /**
   * Pharmacien findMany
   */
  export type PharmacienFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter, which Pharmaciens to fetch.
     */
    where?: PharmacienWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pharmaciens to fetch.
     */
    orderBy?: PharmacienOrderByWithRelationInput | PharmacienOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pharmaciens.
     */
    cursor?: PharmacienWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pharmaciens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pharmaciens.
     */
    skip?: number
    distinct?: PharmacienScalarFieldEnum | PharmacienScalarFieldEnum[]
  }

  /**
   * Pharmacien create
   */
  export type PharmacienCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * The data needed to create a Pharmacien.
     */
    data: XOR<PharmacienCreateInput, PharmacienUncheckedCreateInput>
  }

  /**
   * Pharmacien createMany
   */
  export type PharmacienCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Pharmaciens.
     */
    data: PharmacienCreateManyInput | PharmacienCreateManyInput[]
  }

  /**
   * Pharmacien createManyAndReturn
   */
  export type PharmacienCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Pharmaciens.
     */
    data: PharmacienCreateManyInput | PharmacienCreateManyInput[]
  }

  /**
   * Pharmacien update
   */
  export type PharmacienUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * The data needed to update a Pharmacien.
     */
    data: XOR<PharmacienUpdateInput, PharmacienUncheckedUpdateInput>
    /**
     * Choose, which Pharmacien to update.
     */
    where: PharmacienWhereUniqueInput
  }

  /**
   * Pharmacien updateMany
   */
  export type PharmacienUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pharmaciens.
     */
    data: XOR<PharmacienUpdateManyMutationInput, PharmacienUncheckedUpdateManyInput>
    /**
     * Filter which Pharmaciens to update
     */
    where?: PharmacienWhereInput
  }

  /**
   * Pharmacien upsert
   */
  export type PharmacienUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * The filter to search for the Pharmacien to update in case it exists.
     */
    where: PharmacienWhereUniqueInput
    /**
     * In case the Pharmacien found by the `where` argument doesn't exist, create a new Pharmacien with this data.
     */
    create: XOR<PharmacienCreateInput, PharmacienUncheckedCreateInput>
    /**
     * In case the Pharmacien was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PharmacienUpdateInput, PharmacienUncheckedUpdateInput>
  }

  /**
   * Pharmacien delete
   */
  export type PharmacienDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
    /**
     * Filter which Pharmacien to delete.
     */
    where: PharmacienWhereUniqueInput
  }

  /**
   * Pharmacien deleteMany
   */
  export type PharmacienDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pharmaciens to delete
     */
    where?: PharmacienWhereInput
  }

  /**
   * Pharmacien without action
   */
  export type PharmacienDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pharmacien
     */
    select?: PharmacienSelect<ExtArgs> | null
  }


  /**
   * Model Produit
   */

  export type AggregateProduit = {
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  export type ProduitAvgAggregateOutputType = {
    id: number | null
    prix: number | null
    quantite: number | null
  }

  export type ProduitSumAggregateOutputType = {
    id: number | null
    prix: number | null
    quantite: number | null
  }

  export type ProduitMinAggregateOutputType = {
    id: number | null
    nom: string | null
    prix: number | null
    quantite: number | null
  }

  export type ProduitMaxAggregateOutputType = {
    id: number | null
    nom: string | null
    prix: number | null
    quantite: number | null
  }

  export type ProduitCountAggregateOutputType = {
    id: number
    nom: number
    prix: number
    quantite: number
    _all: number
  }


  export type ProduitAvgAggregateInputType = {
    id?: true
    prix?: true
    quantite?: true
  }

  export type ProduitSumAggregateInputType = {
    id?: true
    prix?: true
    quantite?: true
  }

  export type ProduitMinAggregateInputType = {
    id?: true
    nom?: true
    prix?: true
    quantite?: true
  }

  export type ProduitMaxAggregateInputType = {
    id?: true
    nom?: true
    prix?: true
    quantite?: true
  }

  export type ProduitCountAggregateInputType = {
    id?: true
    nom?: true
    prix?: true
    quantite?: true
    _all?: true
  }

  export type ProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produit to aggregate.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produits
    **/
    _count?: true | ProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProduitMaxAggregateInputType
  }

  export type GetProduitAggregateType<T extends ProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduit[P]>
      : GetScalarType<T[P], AggregateProduit[P]>
  }




  export type ProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProduitWhereInput
    orderBy?: ProduitOrderByWithAggregationInput | ProduitOrderByWithAggregationInput[]
    by: ProduitScalarFieldEnum[] | ProduitScalarFieldEnum
    having?: ProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProduitCountAggregateInputType | true
    _avg?: ProduitAvgAggregateInputType
    _sum?: ProduitSumAggregateInputType
    _min?: ProduitMinAggregateInputType
    _max?: ProduitMaxAggregateInputType
  }

  export type ProduitGroupByOutputType = {
    id: number
    nom: string
    prix: number
    quantite: number
    _count: ProduitCountAggregateOutputType | null
    _avg: ProduitAvgAggregateOutputType | null
    _sum: ProduitSumAggregateOutputType | null
    _min: ProduitMinAggregateOutputType | null
    _max: ProduitMaxAggregateOutputType | null
  }

  type GetProduitGroupByPayload<T extends ProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProduitGroupByOutputType[P]>
            : GetScalarType<T[P], ProduitGroupByOutputType[P]>
        }
      >
    >


  export type ProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prix?: boolean
    quantite?: boolean
    produits?: boolean | Produit$produitsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nom?: boolean
    prix?: boolean
    quantite?: boolean
  }, ExtArgs["result"]["produit"]>

  export type ProduitSelectScalar = {
    id?: boolean
    nom?: boolean
    prix?: boolean
    quantite?: boolean
  }

  export type ProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | Produit$produitsArgs<ExtArgs>
    _count?: boolean | ProduitCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProduitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $ProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produit"
    objects: {
      produits: Prisma.$FactureProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      nom: string
      prix: number
      quantite: number
    }, ExtArgs["result"]["produit"]>
    composites: {}
  }

  type ProduitGetPayload<S extends boolean | null | undefined | ProduitDefaultArgs> = $Result.GetResult<Prisma.$ProduitPayload, S>

  type ProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProduitCountAggregateInputType | true
    }

  export interface ProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produit'], meta: { name: 'Produit' } }
    /**
     * Find zero or one Produit that matches the filter.
     * @param {ProduitFindUniqueArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProduitFindUniqueArgs>(args: SelectSubset<T, ProduitFindUniqueArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProduitFindUniqueOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, ProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProduitFindFirstArgs>(args?: SelectSubset<T, ProduitFindFirstArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindFirstOrThrowArgs} args - Arguments to find a Produit
     * @example
     * // Get one Produit
     * const produit = await prisma.produit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, ProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produits
     * const produits = await prisma.produit.findMany()
     * 
     * // Get first 10 Produits
     * const produits = await prisma.produit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produitWithIdOnly = await prisma.produit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProduitFindManyArgs>(args?: SelectSubset<T, ProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produit.
     * @param {ProduitCreateArgs} args - Arguments to create a Produit.
     * @example
     * // Create one Produit
     * const Produit = await prisma.produit.create({
     *   data: {
     *     // ... data to create a Produit
     *   }
     * })
     * 
     */
    create<T extends ProduitCreateArgs>(args: SelectSubset<T, ProduitCreateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produits.
     * @param {ProduitCreateManyArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProduitCreateManyArgs>(args?: SelectSubset<T, ProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Produits and returns the data saved in the database.
     * @param {ProduitCreateManyAndReturnArgs} args - Arguments to create many Produits.
     * @example
     * // Create many Produits
     * const produit = await prisma.produit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Produits and only return the `id`
     * const produitWithIdOnly = await prisma.produit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProduitCreateManyAndReturnArgs>(args?: SelectSubset<T, ProduitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Produit.
     * @param {ProduitDeleteArgs} args - Arguments to delete one Produit.
     * @example
     * // Delete one Produit
     * const Produit = await prisma.produit.delete({
     *   where: {
     *     // ... filter to delete one Produit
     *   }
     * })
     * 
     */
    delete<T extends ProduitDeleteArgs>(args: SelectSubset<T, ProduitDeleteArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produit.
     * @param {ProduitUpdateArgs} args - Arguments to update one Produit.
     * @example
     * // Update one Produit
     * const produit = await prisma.produit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProduitUpdateArgs>(args: SelectSubset<T, ProduitUpdateArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produits.
     * @param {ProduitDeleteManyArgs} args - Arguments to filter Produits to delete.
     * @example
     * // Delete a few Produits
     * const { count } = await prisma.produit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProduitDeleteManyArgs>(args?: SelectSubset<T, ProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produits
     * const produit = await prisma.produit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProduitUpdateManyArgs>(args: SelectSubset<T, ProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produit.
     * @param {ProduitUpsertArgs} args - Arguments to update or create a Produit.
     * @example
     * // Update or create a Produit
     * const produit = await prisma.produit.upsert({
     *   create: {
     *     // ... data to create a Produit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produit we want to update
     *   }
     * })
     */
    upsert<T extends ProduitUpsertArgs>(args: SelectSubset<T, ProduitUpsertArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitCountArgs} args - Arguments to filter Produits to count.
     * @example
     * // Count the number of Produits
     * const count = await prisma.produit.count({
     *   where: {
     *     // ... the filter for the Produits we want to count
     *   }
     * })
    **/
    count<T extends ProduitCountArgs>(
      args?: Subset<T, ProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProduitAggregateArgs>(args: Subset<T, ProduitAggregateArgs>): Prisma.PrismaPromise<GetProduitAggregateType<T>>

    /**
     * Group by Produit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProduitGroupByArgs['orderBy'] }
        : { orderBy?: ProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produit model
   */
  readonly fields: ProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produits<T extends Produit$produitsArgs<ExtArgs> = {}>(args?: Subset<T, Produit$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produit model
   */ 
  interface ProduitFieldRefs {
    readonly id: FieldRef<"Produit", 'Int'>
    readonly nom: FieldRef<"Produit", 'String'>
    readonly prix: FieldRef<"Produit", 'Float'>
    readonly quantite: FieldRef<"Produit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Produit findUnique
   */
  export type ProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findUniqueOrThrow
   */
  export type ProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit findFirst
   */
  export type ProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findFirstOrThrow
   */
  export type ProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produit to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produits.
     */
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit findMany
   */
  export type ProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter, which Produits to fetch.
     */
    where?: ProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produits to fetch.
     */
    orderBy?: ProduitOrderByWithRelationInput | ProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produits.
     */
    cursor?: ProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produits.
     */
    skip?: number
    distinct?: ProduitScalarFieldEnum | ProduitScalarFieldEnum[]
  }

  /**
   * Produit create
   */
  export type ProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a Produit.
     */
    data: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
  }

  /**
   * Produit createMany
   */
  export type ProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
  }

  /**
   * Produit createManyAndReturn
   */
  export type ProduitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Produits.
     */
    data: ProduitCreateManyInput | ProduitCreateManyInput[]
  }

  /**
   * Produit update
   */
  export type ProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a Produit.
     */
    data: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
    /**
     * Choose, which Produit to update.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit updateMany
   */
  export type ProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produits.
     */
    data: XOR<ProduitUpdateManyMutationInput, ProduitUncheckedUpdateManyInput>
    /**
     * Filter which Produits to update
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit upsert
   */
  export type ProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the Produit to update in case it exists.
     */
    where: ProduitWhereUniqueInput
    /**
     * In case the Produit found by the `where` argument doesn't exist, create a new Produit with this data.
     */
    create: XOR<ProduitCreateInput, ProduitUncheckedCreateInput>
    /**
     * In case the Produit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProduitUpdateInput, ProduitUncheckedUpdateInput>
  }

  /**
   * Produit delete
   */
  export type ProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
    /**
     * Filter which Produit to delete.
     */
    where: ProduitWhereUniqueInput
  }

  /**
   * Produit deleteMany
   */
  export type ProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produits to delete
     */
    where?: ProduitWhereInput
  }

  /**
   * Produit.produits
   */
  export type Produit$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    where?: FactureProduitWhereInput
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    cursor?: FactureProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FactureProduitScalarFieldEnum | FactureProduitScalarFieldEnum[]
  }

  /**
   * Produit without action
   */
  export type ProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produit
     */
    select?: ProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProduitInclude<ExtArgs> | null
  }


  /**
   * Model Facture
   */

  export type AggregateFacture = {
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  export type FactureAvgAggregateOutputType = {
    id: number | null
  }

  export type FactureSumAggregateOutputType = {
    id: number | null
  }

  export type FactureMinAggregateOutputType = {
    id: number | null
    date: Date | null
  }

  export type FactureMaxAggregateOutputType = {
    id: number | null
    date: Date | null
  }

  export type FactureCountAggregateOutputType = {
    id: number
    date: number
    _all: number
  }


  export type FactureAvgAggregateInputType = {
    id?: true
  }

  export type FactureSumAggregateInputType = {
    id?: true
  }

  export type FactureMinAggregateInputType = {
    id?: true
    date?: true
  }

  export type FactureMaxAggregateInputType = {
    id?: true
    date?: true
  }

  export type FactureCountAggregateInputType = {
    id?: true
    date?: true
    _all?: true
  }

  export type FactureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Facture to aggregate.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Factures
    **/
    _count?: true | FactureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FactureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FactureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactureMaxAggregateInputType
  }

  export type GetFactureAggregateType<T extends FactureAggregateArgs> = {
        [P in keyof T & keyof AggregateFacture]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFacture[P]>
      : GetScalarType<T[P], AggregateFacture[P]>
  }




  export type FactureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureWhereInput
    orderBy?: FactureOrderByWithAggregationInput | FactureOrderByWithAggregationInput[]
    by: FactureScalarFieldEnum[] | FactureScalarFieldEnum
    having?: FactureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactureCountAggregateInputType | true
    _avg?: FactureAvgAggregateInputType
    _sum?: FactureSumAggregateInputType
    _min?: FactureMinAggregateInputType
    _max?: FactureMaxAggregateInputType
  }

  export type FactureGroupByOutputType = {
    id: number
    date: Date
    _count: FactureCountAggregateOutputType | null
    _avg: FactureAvgAggregateOutputType | null
    _sum: FactureSumAggregateOutputType | null
    _min: FactureMinAggregateOutputType | null
    _max: FactureMaxAggregateOutputType | null
  }

  type GetFactureGroupByPayload<T extends FactureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FactureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactureGroupByOutputType[P]>
            : GetScalarType<T[P], FactureGroupByOutputType[P]>
        }
      >
    >


  export type FactureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    produits?: boolean | Facture$produitsArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["facture"]>

  export type FactureSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
  }, ExtArgs["result"]["facture"]>

  export type FactureSelectScalar = {
    id?: boolean
    date?: boolean
  }

  export type FactureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    produits?: boolean | Facture$produitsArgs<ExtArgs>
    _count?: boolean | FactureCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FactureIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $FacturePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Facture"
    objects: {
      produits: Prisma.$FactureProduitPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
    }, ExtArgs["result"]["facture"]>
    composites: {}
  }

  type FactureGetPayload<S extends boolean | null | undefined | FactureDefaultArgs> = $Result.GetResult<Prisma.$FacturePayload, S>

  type FactureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FactureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FactureCountAggregateInputType | true
    }

  export interface FactureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Facture'], meta: { name: 'Facture' } }
    /**
     * Find zero or one Facture that matches the filter.
     * @param {FactureFindUniqueArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FactureFindUniqueArgs>(args: SelectSubset<T, FactureFindUniqueArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Facture that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FactureFindUniqueOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FactureFindUniqueOrThrowArgs>(args: SelectSubset<T, FactureFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Facture that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindFirstArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FactureFindFirstArgs>(args?: SelectSubset<T, FactureFindFirstArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Facture that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindFirstOrThrowArgs} args - Arguments to find a Facture
     * @example
     * // Get one Facture
     * const facture = await prisma.facture.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FactureFindFirstOrThrowArgs>(args?: SelectSubset<T, FactureFindFirstOrThrowArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Factures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Factures
     * const factures = await prisma.facture.findMany()
     * 
     * // Get first 10 Factures
     * const factures = await prisma.facture.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const factureWithIdOnly = await prisma.facture.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FactureFindManyArgs>(args?: SelectSubset<T, FactureFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Facture.
     * @param {FactureCreateArgs} args - Arguments to create a Facture.
     * @example
     * // Create one Facture
     * const Facture = await prisma.facture.create({
     *   data: {
     *     // ... data to create a Facture
     *   }
     * })
     * 
     */
    create<T extends FactureCreateArgs>(args: SelectSubset<T, FactureCreateArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Factures.
     * @param {FactureCreateManyArgs} args - Arguments to create many Factures.
     * @example
     * // Create many Factures
     * const facture = await prisma.facture.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FactureCreateManyArgs>(args?: SelectSubset<T, FactureCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Factures and returns the data saved in the database.
     * @param {FactureCreateManyAndReturnArgs} args - Arguments to create many Factures.
     * @example
     * // Create many Factures
     * const facture = await prisma.facture.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Factures and only return the `id`
     * const factureWithIdOnly = await prisma.facture.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FactureCreateManyAndReturnArgs>(args?: SelectSubset<T, FactureCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Facture.
     * @param {FactureDeleteArgs} args - Arguments to delete one Facture.
     * @example
     * // Delete one Facture
     * const Facture = await prisma.facture.delete({
     *   where: {
     *     // ... filter to delete one Facture
     *   }
     * })
     * 
     */
    delete<T extends FactureDeleteArgs>(args: SelectSubset<T, FactureDeleteArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Facture.
     * @param {FactureUpdateArgs} args - Arguments to update one Facture.
     * @example
     * // Update one Facture
     * const facture = await prisma.facture.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FactureUpdateArgs>(args: SelectSubset<T, FactureUpdateArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Factures.
     * @param {FactureDeleteManyArgs} args - Arguments to filter Factures to delete.
     * @example
     * // Delete a few Factures
     * const { count } = await prisma.facture.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FactureDeleteManyArgs>(args?: SelectSubset<T, FactureDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Factures
     * const facture = await prisma.facture.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FactureUpdateManyArgs>(args: SelectSubset<T, FactureUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Facture.
     * @param {FactureUpsertArgs} args - Arguments to update or create a Facture.
     * @example
     * // Update or create a Facture
     * const facture = await prisma.facture.upsert({
     *   create: {
     *     // ... data to create a Facture
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Facture we want to update
     *   }
     * })
     */
    upsert<T extends FactureUpsertArgs>(args: SelectSubset<T, FactureUpsertArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Factures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureCountArgs} args - Arguments to filter Factures to count.
     * @example
     * // Count the number of Factures
     * const count = await prisma.facture.count({
     *   where: {
     *     // ... the filter for the Factures we want to count
     *   }
     * })
    **/
    count<T extends FactureCountArgs>(
      args?: Subset<T, FactureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactureAggregateArgs>(args: Subset<T, FactureAggregateArgs>): Prisma.PrismaPromise<GetFactureAggregateType<T>>

    /**
     * Group by Facture.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FactureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FactureGroupByArgs['orderBy'] }
        : { orderBy?: FactureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FactureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Facture model
   */
  readonly fields: FactureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Facture.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FactureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    produits<T extends Facture$produitsArgs<ExtArgs> = {}>(args?: Subset<T, Facture$produitsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Facture model
   */ 
  interface FactureFieldRefs {
    readonly id: FieldRef<"Facture", 'Int'>
    readonly date: FieldRef<"Facture", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Facture findUnique
   */
  export type FactureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture findUniqueOrThrow
   */
  export type FactureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture findFirst
   */
  export type FactureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture findFirstOrThrow
   */
  export type FactureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Facture to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Factures.
     */
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture findMany
   */
  export type FactureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter, which Factures to fetch.
     */
    where?: FactureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Factures to fetch.
     */
    orderBy?: FactureOrderByWithRelationInput | FactureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Factures.
     */
    cursor?: FactureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Factures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Factures.
     */
    skip?: number
    distinct?: FactureScalarFieldEnum | FactureScalarFieldEnum[]
  }

  /**
   * Facture create
   */
  export type FactureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The data needed to create a Facture.
     */
    data?: XOR<FactureCreateInput, FactureUncheckedCreateInput>
  }

  /**
   * Facture createMany
   */
  export type FactureCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Factures.
     */
    data: FactureCreateManyInput | FactureCreateManyInput[]
  }

  /**
   * Facture createManyAndReturn
   */
  export type FactureCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Factures.
     */
    data: FactureCreateManyInput | FactureCreateManyInput[]
  }

  /**
   * Facture update
   */
  export type FactureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The data needed to update a Facture.
     */
    data: XOR<FactureUpdateInput, FactureUncheckedUpdateInput>
    /**
     * Choose, which Facture to update.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture updateMany
   */
  export type FactureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Factures.
     */
    data: XOR<FactureUpdateManyMutationInput, FactureUncheckedUpdateManyInput>
    /**
     * Filter which Factures to update
     */
    where?: FactureWhereInput
  }

  /**
   * Facture upsert
   */
  export type FactureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * The filter to search for the Facture to update in case it exists.
     */
    where: FactureWhereUniqueInput
    /**
     * In case the Facture found by the `where` argument doesn't exist, create a new Facture with this data.
     */
    create: XOR<FactureCreateInput, FactureUncheckedCreateInput>
    /**
     * In case the Facture was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FactureUpdateInput, FactureUncheckedUpdateInput>
  }

  /**
   * Facture delete
   */
  export type FactureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
    /**
     * Filter which Facture to delete.
     */
    where: FactureWhereUniqueInput
  }

  /**
   * Facture deleteMany
   */
  export type FactureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Factures to delete
     */
    where?: FactureWhereInput
  }

  /**
   * Facture.produits
   */
  export type Facture$produitsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    where?: FactureProduitWhereInput
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    cursor?: FactureProduitWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FactureProduitScalarFieldEnum | FactureProduitScalarFieldEnum[]
  }

  /**
   * Facture without action
   */
  export type FactureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Facture
     */
    select?: FactureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureInclude<ExtArgs> | null
  }


  /**
   * Model FactureProduit
   */

  export type AggregateFactureProduit = {
    _count: FactureProduitCountAggregateOutputType | null
    _avg: FactureProduitAvgAggregateOutputType | null
    _sum: FactureProduitSumAggregateOutputType | null
    _min: FactureProduitMinAggregateOutputType | null
    _max: FactureProduitMaxAggregateOutputType | null
  }

  export type FactureProduitAvgAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type FactureProduitSumAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type FactureProduitMinAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type FactureProduitMaxAggregateOutputType = {
    id: number | null
    factureId: number | null
    produitId: number | null
    quantite: number | null
  }

  export type FactureProduitCountAggregateOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    _all: number
  }


  export type FactureProduitAvgAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
  }

  export type FactureProduitSumAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
  }

  export type FactureProduitMinAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
  }

  export type FactureProduitMaxAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
  }

  export type FactureProduitCountAggregateInputType = {
    id?: true
    factureId?: true
    produitId?: true
    quantite?: true
    _all?: true
  }

  export type FactureProduitAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FactureProduit to aggregate.
     */
    where?: FactureProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactureProduits to fetch.
     */
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FactureProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactureProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactureProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FactureProduits
    **/
    _count?: true | FactureProduitCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FactureProduitAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FactureProduitSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FactureProduitMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FactureProduitMaxAggregateInputType
  }

  export type GetFactureProduitAggregateType<T extends FactureProduitAggregateArgs> = {
        [P in keyof T & keyof AggregateFactureProduit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFactureProduit[P]>
      : GetScalarType<T[P], AggregateFactureProduit[P]>
  }




  export type FactureProduitGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FactureProduitWhereInput
    orderBy?: FactureProduitOrderByWithAggregationInput | FactureProduitOrderByWithAggregationInput[]
    by: FactureProduitScalarFieldEnum[] | FactureProduitScalarFieldEnum
    having?: FactureProduitScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FactureProduitCountAggregateInputType | true
    _avg?: FactureProduitAvgAggregateInputType
    _sum?: FactureProduitSumAggregateInputType
    _min?: FactureProduitMinAggregateInputType
    _max?: FactureProduitMaxAggregateInputType
  }

  export type FactureProduitGroupByOutputType = {
    id: number
    factureId: number
    produitId: number
    quantite: number
    _count: FactureProduitCountAggregateOutputType | null
    _avg: FactureProduitAvgAggregateOutputType | null
    _sum: FactureProduitSumAggregateOutputType | null
    _min: FactureProduitMinAggregateOutputType | null
    _max: FactureProduitMaxAggregateOutputType | null
  }

  type GetFactureProduitGroupByPayload<T extends FactureProduitGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FactureProduitGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FactureProduitGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FactureProduitGroupByOutputType[P]>
            : GetScalarType<T[P], FactureProduitGroupByOutputType[P]>
        }
      >
    >


  export type FactureProduitSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factureProduit"]>

  export type FactureProduitSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["factureProduit"]>

  export type FactureProduitSelectScalar = {
    id?: boolean
    factureId?: boolean
    produitId?: boolean
    quantite?: boolean
  }

  export type FactureProduitInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }
  export type FactureProduitIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    facture?: boolean | FactureDefaultArgs<ExtArgs>
    produit?: boolean | ProduitDefaultArgs<ExtArgs>
  }

  export type $FactureProduitPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FactureProduit"
    objects: {
      facture: Prisma.$FacturePayload<ExtArgs>
      produit: Prisma.$ProduitPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      factureId: number
      produitId: number
      quantite: number
    }, ExtArgs["result"]["factureProduit"]>
    composites: {}
  }

  type FactureProduitGetPayload<S extends boolean | null | undefined | FactureProduitDefaultArgs> = $Result.GetResult<Prisma.$FactureProduitPayload, S>

  type FactureProduitCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FactureProduitFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FactureProduitCountAggregateInputType | true
    }

  export interface FactureProduitDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FactureProduit'], meta: { name: 'FactureProduit' } }
    /**
     * Find zero or one FactureProduit that matches the filter.
     * @param {FactureProduitFindUniqueArgs} args - Arguments to find a FactureProduit
     * @example
     * // Get one FactureProduit
     * const factureProduit = await prisma.factureProduit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FactureProduitFindUniqueArgs>(args: SelectSubset<T, FactureProduitFindUniqueArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one FactureProduit that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {FactureProduitFindUniqueOrThrowArgs} args - Arguments to find a FactureProduit
     * @example
     * // Get one FactureProduit
     * const factureProduit = await prisma.factureProduit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FactureProduitFindUniqueOrThrowArgs>(args: SelectSubset<T, FactureProduitFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first FactureProduit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitFindFirstArgs} args - Arguments to find a FactureProduit
     * @example
     * // Get one FactureProduit
     * const factureProduit = await prisma.factureProduit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FactureProduitFindFirstArgs>(args?: SelectSubset<T, FactureProduitFindFirstArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first FactureProduit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitFindFirstOrThrowArgs} args - Arguments to find a FactureProduit
     * @example
     * // Get one FactureProduit
     * const factureProduit = await prisma.factureProduit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FactureProduitFindFirstOrThrowArgs>(args?: SelectSubset<T, FactureProduitFindFirstOrThrowArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more FactureProduits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FactureProduits
     * const factureProduits = await prisma.factureProduit.findMany()
     * 
     * // Get first 10 FactureProduits
     * const factureProduits = await prisma.factureProduit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const factureProduitWithIdOnly = await prisma.factureProduit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FactureProduitFindManyArgs>(args?: SelectSubset<T, FactureProduitFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a FactureProduit.
     * @param {FactureProduitCreateArgs} args - Arguments to create a FactureProduit.
     * @example
     * // Create one FactureProduit
     * const FactureProduit = await prisma.factureProduit.create({
     *   data: {
     *     // ... data to create a FactureProduit
     *   }
     * })
     * 
     */
    create<T extends FactureProduitCreateArgs>(args: SelectSubset<T, FactureProduitCreateArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many FactureProduits.
     * @param {FactureProduitCreateManyArgs} args - Arguments to create many FactureProduits.
     * @example
     * // Create many FactureProduits
     * const factureProduit = await prisma.factureProduit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FactureProduitCreateManyArgs>(args?: SelectSubset<T, FactureProduitCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FactureProduits and returns the data saved in the database.
     * @param {FactureProduitCreateManyAndReturnArgs} args - Arguments to create many FactureProduits.
     * @example
     * // Create many FactureProduits
     * const factureProduit = await prisma.factureProduit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FactureProduits and only return the `id`
     * const factureProduitWithIdOnly = await prisma.factureProduit.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FactureProduitCreateManyAndReturnArgs>(args?: SelectSubset<T, FactureProduitCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a FactureProduit.
     * @param {FactureProduitDeleteArgs} args - Arguments to delete one FactureProduit.
     * @example
     * // Delete one FactureProduit
     * const FactureProduit = await prisma.factureProduit.delete({
     *   where: {
     *     // ... filter to delete one FactureProduit
     *   }
     * })
     * 
     */
    delete<T extends FactureProduitDeleteArgs>(args: SelectSubset<T, FactureProduitDeleteArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one FactureProduit.
     * @param {FactureProduitUpdateArgs} args - Arguments to update one FactureProduit.
     * @example
     * // Update one FactureProduit
     * const factureProduit = await prisma.factureProduit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FactureProduitUpdateArgs>(args: SelectSubset<T, FactureProduitUpdateArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more FactureProduits.
     * @param {FactureProduitDeleteManyArgs} args - Arguments to filter FactureProduits to delete.
     * @example
     * // Delete a few FactureProduits
     * const { count } = await prisma.factureProduit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FactureProduitDeleteManyArgs>(args?: SelectSubset<T, FactureProduitDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FactureProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FactureProduits
     * const factureProduit = await prisma.factureProduit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FactureProduitUpdateManyArgs>(args: SelectSubset<T, FactureProduitUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FactureProduit.
     * @param {FactureProduitUpsertArgs} args - Arguments to update or create a FactureProduit.
     * @example
     * // Update or create a FactureProduit
     * const factureProduit = await prisma.factureProduit.upsert({
     *   create: {
     *     // ... data to create a FactureProduit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FactureProduit we want to update
     *   }
     * })
     */
    upsert<T extends FactureProduitUpsertArgs>(args: SelectSubset<T, FactureProduitUpsertArgs<ExtArgs>>): Prisma__FactureProduitClient<$Result.GetResult<Prisma.$FactureProduitPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of FactureProduits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitCountArgs} args - Arguments to filter FactureProduits to count.
     * @example
     * // Count the number of FactureProduits
     * const count = await prisma.factureProduit.count({
     *   where: {
     *     // ... the filter for the FactureProduits we want to count
     *   }
     * })
    **/
    count<T extends FactureProduitCountArgs>(
      args?: Subset<T, FactureProduitCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FactureProduitCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FactureProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FactureProduitAggregateArgs>(args: Subset<T, FactureProduitAggregateArgs>): Prisma.PrismaPromise<GetFactureProduitAggregateType<T>>

    /**
     * Group by FactureProduit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FactureProduitGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FactureProduitGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FactureProduitGroupByArgs['orderBy'] }
        : { orderBy?: FactureProduitGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FactureProduitGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFactureProduitGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FactureProduit model
   */
  readonly fields: FactureProduitFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FactureProduit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FactureProduitClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    facture<T extends FactureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FactureDefaultArgs<ExtArgs>>): Prisma__FactureClient<$Result.GetResult<Prisma.$FacturePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    produit<T extends ProduitDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProduitDefaultArgs<ExtArgs>>): Prisma__ProduitClient<$Result.GetResult<Prisma.$ProduitPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FactureProduit model
   */ 
  interface FactureProduitFieldRefs {
    readonly id: FieldRef<"FactureProduit", 'Int'>
    readonly factureId: FieldRef<"FactureProduit", 'Int'>
    readonly produitId: FieldRef<"FactureProduit", 'Int'>
    readonly quantite: FieldRef<"FactureProduit", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * FactureProduit findUnique
   */
  export type FactureProduitFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter, which FactureProduit to fetch.
     */
    where: FactureProduitWhereUniqueInput
  }

  /**
   * FactureProduit findUniqueOrThrow
   */
  export type FactureProduitFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter, which FactureProduit to fetch.
     */
    where: FactureProduitWhereUniqueInput
  }

  /**
   * FactureProduit findFirst
   */
  export type FactureProduitFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter, which FactureProduit to fetch.
     */
    where?: FactureProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactureProduits to fetch.
     */
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FactureProduits.
     */
    cursor?: FactureProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactureProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactureProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FactureProduits.
     */
    distinct?: FactureProduitScalarFieldEnum | FactureProduitScalarFieldEnum[]
  }

  /**
   * FactureProduit findFirstOrThrow
   */
  export type FactureProduitFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter, which FactureProduit to fetch.
     */
    where?: FactureProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactureProduits to fetch.
     */
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FactureProduits.
     */
    cursor?: FactureProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactureProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactureProduits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FactureProduits.
     */
    distinct?: FactureProduitScalarFieldEnum | FactureProduitScalarFieldEnum[]
  }

  /**
   * FactureProduit findMany
   */
  export type FactureProduitFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter, which FactureProduits to fetch.
     */
    where?: FactureProduitWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FactureProduits to fetch.
     */
    orderBy?: FactureProduitOrderByWithRelationInput | FactureProduitOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FactureProduits.
     */
    cursor?: FactureProduitWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FactureProduits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FactureProduits.
     */
    skip?: number
    distinct?: FactureProduitScalarFieldEnum | FactureProduitScalarFieldEnum[]
  }

  /**
   * FactureProduit create
   */
  export type FactureProduitCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * The data needed to create a FactureProduit.
     */
    data: XOR<FactureProduitCreateInput, FactureProduitUncheckedCreateInput>
  }

  /**
   * FactureProduit createMany
   */
  export type FactureProduitCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FactureProduits.
     */
    data: FactureProduitCreateManyInput | FactureProduitCreateManyInput[]
  }

  /**
   * FactureProduit createManyAndReturn
   */
  export type FactureProduitCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many FactureProduits.
     */
    data: FactureProduitCreateManyInput | FactureProduitCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FactureProduit update
   */
  export type FactureProduitUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * The data needed to update a FactureProduit.
     */
    data: XOR<FactureProduitUpdateInput, FactureProduitUncheckedUpdateInput>
    /**
     * Choose, which FactureProduit to update.
     */
    where: FactureProduitWhereUniqueInput
  }

  /**
   * FactureProduit updateMany
   */
  export type FactureProduitUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FactureProduits.
     */
    data: XOR<FactureProduitUpdateManyMutationInput, FactureProduitUncheckedUpdateManyInput>
    /**
     * Filter which FactureProduits to update
     */
    where?: FactureProduitWhereInput
  }

  /**
   * FactureProduit upsert
   */
  export type FactureProduitUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * The filter to search for the FactureProduit to update in case it exists.
     */
    where: FactureProduitWhereUniqueInput
    /**
     * In case the FactureProduit found by the `where` argument doesn't exist, create a new FactureProduit with this data.
     */
    create: XOR<FactureProduitCreateInput, FactureProduitUncheckedCreateInput>
    /**
     * In case the FactureProduit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FactureProduitUpdateInput, FactureProduitUncheckedUpdateInput>
  }

  /**
   * FactureProduit delete
   */
  export type FactureProduitDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
    /**
     * Filter which FactureProduit to delete.
     */
    where: FactureProduitWhereUniqueInput
  }

  /**
   * FactureProduit deleteMany
   */
  export type FactureProduitDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FactureProduits to delete
     */
    where?: FactureProduitWhereInput
  }

  /**
   * FactureProduit without action
   */
  export type FactureProduitDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FactureProduit
     */
    select?: FactureProduitSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FactureProduitInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const PharmacienScalarFieldEnum: {
    id: 'id',
    pseudo: 'pseudo',
    mdp: 'mdp'
  };

  export type PharmacienScalarFieldEnum = (typeof PharmacienScalarFieldEnum)[keyof typeof PharmacienScalarFieldEnum]


  export const ProduitScalarFieldEnum: {
    id: 'id',
    nom: 'nom',
    prix: 'prix',
    quantite: 'quantite'
  };

  export type ProduitScalarFieldEnum = (typeof ProduitScalarFieldEnum)[keyof typeof ProduitScalarFieldEnum]


  export const FactureScalarFieldEnum: {
    id: 'id',
    date: 'date'
  };

  export type FactureScalarFieldEnum = (typeof FactureScalarFieldEnum)[keyof typeof FactureScalarFieldEnum]


  export const FactureProduitScalarFieldEnum: {
    id: 'id',
    factureId: 'factureId',
    produitId: 'produitId',
    quantite: 'quantite'
  };

  export type FactureProduitScalarFieldEnum = (typeof FactureProduitScalarFieldEnum)[keyof typeof FactureProduitScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    
  /**
   * Deep Input Types
   */


  export type PharmacienWhereInput = {
    AND?: PharmacienWhereInput | PharmacienWhereInput[]
    OR?: PharmacienWhereInput[]
    NOT?: PharmacienWhereInput | PharmacienWhereInput[]
    id?: IntFilter<"Pharmacien"> | number
    pseudo?: StringFilter<"Pharmacien"> | string
    mdp?: StringFilter<"Pharmacien"> | string
  }

  export type PharmacienOrderByWithRelationInput = {
    id?: SortOrder
    pseudo?: SortOrder
    mdp?: SortOrder
  }

  export type PharmacienWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    pseudo?: string
    AND?: PharmacienWhereInput | PharmacienWhereInput[]
    OR?: PharmacienWhereInput[]
    NOT?: PharmacienWhereInput | PharmacienWhereInput[]
    mdp?: StringFilter<"Pharmacien"> | string
  }, "id" | "pseudo">

  export type PharmacienOrderByWithAggregationInput = {
    id?: SortOrder
    pseudo?: SortOrder
    mdp?: SortOrder
    _count?: PharmacienCountOrderByAggregateInput
    _avg?: PharmacienAvgOrderByAggregateInput
    _max?: PharmacienMaxOrderByAggregateInput
    _min?: PharmacienMinOrderByAggregateInput
    _sum?: PharmacienSumOrderByAggregateInput
  }

  export type PharmacienScalarWhereWithAggregatesInput = {
    AND?: PharmacienScalarWhereWithAggregatesInput | PharmacienScalarWhereWithAggregatesInput[]
    OR?: PharmacienScalarWhereWithAggregatesInput[]
    NOT?: PharmacienScalarWhereWithAggregatesInput | PharmacienScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pharmacien"> | number
    pseudo?: StringWithAggregatesFilter<"Pharmacien"> | string
    mdp?: StringWithAggregatesFilter<"Pharmacien"> | string
  }

  export type ProduitWhereInput = {
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    id?: IntFilter<"Produit"> | number
    nom?: StringFilter<"Produit"> | string
    prix?: FloatFilter<"Produit"> | number
    quantite?: IntFilter<"Produit"> | number
    produits?: FactureProduitListRelationFilter
  }

  export type ProduitOrderByWithRelationInput = {
    id?: SortOrder
    nom?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
    produits?: FactureProduitOrderByRelationAggregateInput
  }

  export type ProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProduitWhereInput | ProduitWhereInput[]
    OR?: ProduitWhereInput[]
    NOT?: ProduitWhereInput | ProduitWhereInput[]
    nom?: StringFilter<"Produit"> | string
    prix?: FloatFilter<"Produit"> | number
    quantite?: IntFilter<"Produit"> | number
    produits?: FactureProduitListRelationFilter
  }, "id">

  export type ProduitOrderByWithAggregationInput = {
    id?: SortOrder
    nom?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
    _count?: ProduitCountOrderByAggregateInput
    _avg?: ProduitAvgOrderByAggregateInput
    _max?: ProduitMaxOrderByAggregateInput
    _min?: ProduitMinOrderByAggregateInput
    _sum?: ProduitSumOrderByAggregateInput
  }

  export type ProduitScalarWhereWithAggregatesInput = {
    AND?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    OR?: ProduitScalarWhereWithAggregatesInput[]
    NOT?: ProduitScalarWhereWithAggregatesInput | ProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Produit"> | number
    nom?: StringWithAggregatesFilter<"Produit"> | string
    prix?: FloatWithAggregatesFilter<"Produit"> | number
    quantite?: IntWithAggregatesFilter<"Produit"> | number
  }

  export type FactureWhereInput = {
    AND?: FactureWhereInput | FactureWhereInput[]
    OR?: FactureWhereInput[]
    NOT?: FactureWhereInput | FactureWhereInput[]
    id?: IntFilter<"Facture"> | number
    date?: DateTimeFilter<"Facture"> | Date | string
    produits?: FactureProduitListRelationFilter
  }

  export type FactureOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    produits?: FactureProduitOrderByRelationAggregateInput
  }

  export type FactureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FactureWhereInput | FactureWhereInput[]
    OR?: FactureWhereInput[]
    NOT?: FactureWhereInput | FactureWhereInput[]
    date?: DateTimeFilter<"Facture"> | Date | string
    produits?: FactureProduitListRelationFilter
  }, "id">

  export type FactureOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    _count?: FactureCountOrderByAggregateInput
    _avg?: FactureAvgOrderByAggregateInput
    _max?: FactureMaxOrderByAggregateInput
    _min?: FactureMinOrderByAggregateInput
    _sum?: FactureSumOrderByAggregateInput
  }

  export type FactureScalarWhereWithAggregatesInput = {
    AND?: FactureScalarWhereWithAggregatesInput | FactureScalarWhereWithAggregatesInput[]
    OR?: FactureScalarWhereWithAggregatesInput[]
    NOT?: FactureScalarWhereWithAggregatesInput | FactureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Facture"> | number
    date?: DateTimeWithAggregatesFilter<"Facture"> | Date | string
  }

  export type FactureProduitWhereInput = {
    AND?: FactureProduitWhereInput | FactureProduitWhereInput[]
    OR?: FactureProduitWhereInput[]
    NOT?: FactureProduitWhereInput | FactureProduitWhereInput[]
    id?: IntFilter<"FactureProduit"> | number
    factureId?: IntFilter<"FactureProduit"> | number
    produitId?: IntFilter<"FactureProduit"> | number
    quantite?: IntFilter<"FactureProduit"> | number
    facture?: XOR<FactureScalarRelationFilter, FactureWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }

  export type FactureProduitOrderByWithRelationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    facture?: FactureOrderByWithRelationInput
    produit?: ProduitOrderByWithRelationInput
  }

  export type FactureProduitWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: FactureProduitWhereInput | FactureProduitWhereInput[]
    OR?: FactureProduitWhereInput[]
    NOT?: FactureProduitWhereInput | FactureProduitWhereInput[]
    factureId?: IntFilter<"FactureProduit"> | number
    produitId?: IntFilter<"FactureProduit"> | number
    quantite?: IntFilter<"FactureProduit"> | number
    facture?: XOR<FactureScalarRelationFilter, FactureWhereInput>
    produit?: XOR<ProduitScalarRelationFilter, ProduitWhereInput>
  }, "id">

  export type FactureProduitOrderByWithAggregationInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
    _count?: FactureProduitCountOrderByAggregateInput
    _avg?: FactureProduitAvgOrderByAggregateInput
    _max?: FactureProduitMaxOrderByAggregateInput
    _min?: FactureProduitMinOrderByAggregateInput
    _sum?: FactureProduitSumOrderByAggregateInput
  }

  export type FactureProduitScalarWhereWithAggregatesInput = {
    AND?: FactureProduitScalarWhereWithAggregatesInput | FactureProduitScalarWhereWithAggregatesInput[]
    OR?: FactureProduitScalarWhereWithAggregatesInput[]
    NOT?: FactureProduitScalarWhereWithAggregatesInput | FactureProduitScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"FactureProduit"> | number
    factureId?: IntWithAggregatesFilter<"FactureProduit"> | number
    produitId?: IntWithAggregatesFilter<"FactureProduit"> | number
    quantite?: IntWithAggregatesFilter<"FactureProduit"> | number
  }

  export type PharmacienCreateInput = {
    pseudo: string
    mdp: string
  }

  export type PharmacienUncheckedCreateInput = {
    id?: number
    pseudo: string
    mdp: string
  }

  export type PharmacienUpdateInput = {
    pseudo?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
  }

  export type PharmacienUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    pseudo?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
  }

  export type PharmacienCreateManyInput = {
    id?: number
    pseudo: string
    mdp: string
  }

  export type PharmacienUpdateManyMutationInput = {
    pseudo?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
  }

  export type PharmacienUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    pseudo?: StringFieldUpdateOperationsInput | string
    mdp?: StringFieldUpdateOperationsInput | string
  }

  export type ProduitCreateInput = {
    nom: string
    prix: number
    quantite: number
    produits?: FactureProduitCreateNestedManyWithoutProduitInput
  }

  export type ProduitUncheckedCreateInput = {
    id?: number
    nom: string
    prix: number
    quantite: number
    produits?: FactureProduitUncheckedCreateNestedManyWithoutProduitInput
  }

  export type ProduitUpdateInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    produits?: FactureProduitUpdateManyWithoutProduitNestedInput
  }

  export type ProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
    produits?: FactureProduitUncheckedUpdateManyWithoutProduitNestedInput
  }

  export type ProduitCreateManyInput = {
    id?: number
    nom: string
    prix: number
    quantite: number
  }

  export type ProduitUpdateManyMutationInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type ProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureCreateInput = {
    date?: Date | string
    produits?: FactureProduitCreateNestedManyWithoutFactureInput
  }

  export type FactureUncheckedCreateInput = {
    id?: number
    date?: Date | string
    produits?: FactureProduitUncheckedCreateNestedManyWithoutFactureInput
  }

  export type FactureUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: FactureProduitUpdateManyWithoutFactureNestedInput
  }

  export type FactureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    produits?: FactureProduitUncheckedUpdateManyWithoutFactureNestedInput
  }

  export type FactureCreateManyInput = {
    id?: number
    date?: Date | string
  }

  export type FactureUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactureProduitCreateInput = {
    quantite: number
    facture: FactureCreateNestedOneWithoutProduitsInput
    produit: ProduitCreateNestedOneWithoutProduitsInput
  }

  export type FactureProduitUncheckedCreateInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
  }

  export type FactureProduitUpdateInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    facture?: FactureUpdateOneRequiredWithoutProduitsNestedInput
    produit?: ProduitUpdateOneRequiredWithoutProduitsNestedInput
  }

  export type FactureProduitUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitCreateManyInput = {
    id?: number
    factureId: number
    produitId: number
    quantite: number
  }

  export type FactureProduitUpdateManyMutationInput = {
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type PharmacienCountOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    mdp?: SortOrder
  }

  export type PharmacienAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PharmacienMaxOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    mdp?: SortOrder
  }

  export type PharmacienMinOrderByAggregateInput = {
    id?: SortOrder
    pseudo?: SortOrder
    mdp?: SortOrder
  }

  export type PharmacienSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type FactureProduitListRelationFilter = {
    every?: FactureProduitWhereInput
    some?: FactureProduitWhereInput
    none?: FactureProduitWhereInput
  }

  export type FactureProduitOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProduitCountOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
  }

  export type ProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
  }

  export type ProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
  }

  export type ProduitMinOrderByAggregateInput = {
    id?: SortOrder
    nom?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
  }

  export type ProduitSumOrderByAggregateInput = {
    id?: SortOrder
    prix?: SortOrder
    quantite?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FactureCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
  }

  export type FactureAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type FactureMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
  }

  export type FactureMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
  }

  export type FactureSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FactureScalarRelationFilter = {
    is?: FactureWhereInput
    isNot?: FactureWhereInput
  }

  export type ProduitScalarRelationFilter = {
    is?: ProduitWhereInput
    isNot?: ProduitWhereInput
  }

  export type FactureProduitCountOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type FactureProduitAvgOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type FactureProduitMaxOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type FactureProduitMinOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type FactureProduitSumOrderByAggregateInput = {
    id?: SortOrder
    factureId?: SortOrder
    produitId?: SortOrder
    quantite?: SortOrder
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FactureProduitCreateNestedManyWithoutProduitInput = {
    create?: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput> | FactureProduitCreateWithoutProduitInput[] | FactureProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutProduitInput | FactureProduitCreateOrConnectWithoutProduitInput[]
    createMany?: FactureProduitCreateManyProduitInputEnvelope
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
  }

  export type FactureProduitUncheckedCreateNestedManyWithoutProduitInput = {
    create?: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput> | FactureProduitCreateWithoutProduitInput[] | FactureProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutProduitInput | FactureProduitCreateOrConnectWithoutProduitInput[]
    createMany?: FactureProduitCreateManyProduitInputEnvelope
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FactureProduitUpdateManyWithoutProduitNestedInput = {
    create?: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput> | FactureProduitCreateWithoutProduitInput[] | FactureProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutProduitInput | FactureProduitCreateOrConnectWithoutProduitInput[]
    upsert?: FactureProduitUpsertWithWhereUniqueWithoutProduitInput | FactureProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: FactureProduitCreateManyProduitInputEnvelope
    set?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    disconnect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    delete?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    update?: FactureProduitUpdateWithWhereUniqueWithoutProduitInput | FactureProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: FactureProduitUpdateManyWithWhereWithoutProduitInput | FactureProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
  }

  export type FactureProduitUncheckedUpdateManyWithoutProduitNestedInput = {
    create?: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput> | FactureProduitCreateWithoutProduitInput[] | FactureProduitUncheckedCreateWithoutProduitInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutProduitInput | FactureProduitCreateOrConnectWithoutProduitInput[]
    upsert?: FactureProduitUpsertWithWhereUniqueWithoutProduitInput | FactureProduitUpsertWithWhereUniqueWithoutProduitInput[]
    createMany?: FactureProduitCreateManyProduitInputEnvelope
    set?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    disconnect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    delete?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    update?: FactureProduitUpdateWithWhereUniqueWithoutProduitInput | FactureProduitUpdateWithWhereUniqueWithoutProduitInput[]
    updateMany?: FactureProduitUpdateManyWithWhereWithoutProduitInput | FactureProduitUpdateManyWithWhereWithoutProduitInput[]
    deleteMany?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
  }

  export type FactureProduitCreateNestedManyWithoutFactureInput = {
    create?: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput> | FactureProduitCreateWithoutFactureInput[] | FactureProduitUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutFactureInput | FactureProduitCreateOrConnectWithoutFactureInput[]
    createMany?: FactureProduitCreateManyFactureInputEnvelope
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
  }

  export type FactureProduitUncheckedCreateNestedManyWithoutFactureInput = {
    create?: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput> | FactureProduitCreateWithoutFactureInput[] | FactureProduitUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutFactureInput | FactureProduitCreateOrConnectWithoutFactureInput[]
    createMany?: FactureProduitCreateManyFactureInputEnvelope
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FactureProduitUpdateManyWithoutFactureNestedInput = {
    create?: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput> | FactureProduitCreateWithoutFactureInput[] | FactureProduitUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutFactureInput | FactureProduitCreateOrConnectWithoutFactureInput[]
    upsert?: FactureProduitUpsertWithWhereUniqueWithoutFactureInput | FactureProduitUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: FactureProduitCreateManyFactureInputEnvelope
    set?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    disconnect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    delete?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    update?: FactureProduitUpdateWithWhereUniqueWithoutFactureInput | FactureProduitUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: FactureProduitUpdateManyWithWhereWithoutFactureInput | FactureProduitUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
  }

  export type FactureProduitUncheckedUpdateManyWithoutFactureNestedInput = {
    create?: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput> | FactureProduitCreateWithoutFactureInput[] | FactureProduitUncheckedCreateWithoutFactureInput[]
    connectOrCreate?: FactureProduitCreateOrConnectWithoutFactureInput | FactureProduitCreateOrConnectWithoutFactureInput[]
    upsert?: FactureProduitUpsertWithWhereUniqueWithoutFactureInput | FactureProduitUpsertWithWhereUniqueWithoutFactureInput[]
    createMany?: FactureProduitCreateManyFactureInputEnvelope
    set?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    disconnect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    delete?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    connect?: FactureProduitWhereUniqueInput | FactureProduitWhereUniqueInput[]
    update?: FactureProduitUpdateWithWhereUniqueWithoutFactureInput | FactureProduitUpdateWithWhereUniqueWithoutFactureInput[]
    updateMany?: FactureProduitUpdateManyWithWhereWithoutFactureInput | FactureProduitUpdateManyWithWhereWithoutFactureInput[]
    deleteMany?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
  }

  export type FactureCreateNestedOneWithoutProduitsInput = {
    create?: XOR<FactureCreateWithoutProduitsInput, FactureUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: FactureCreateOrConnectWithoutProduitsInput
    connect?: FactureWhereUniqueInput
  }

  export type ProduitCreateNestedOneWithoutProduitsInput = {
    create?: XOR<ProduitCreateWithoutProduitsInput, ProduitUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutProduitsInput
    connect?: ProduitWhereUniqueInput
  }

  export type FactureUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<FactureCreateWithoutProduitsInput, FactureUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: FactureCreateOrConnectWithoutProduitsInput
    upsert?: FactureUpsertWithoutProduitsInput
    connect?: FactureWhereUniqueInput
    update?: XOR<XOR<FactureUpdateToOneWithWhereWithoutProduitsInput, FactureUpdateWithoutProduitsInput>, FactureUncheckedUpdateWithoutProduitsInput>
  }

  export type ProduitUpdateOneRequiredWithoutProduitsNestedInput = {
    create?: XOR<ProduitCreateWithoutProduitsInput, ProduitUncheckedCreateWithoutProduitsInput>
    connectOrCreate?: ProduitCreateOrConnectWithoutProduitsInput
    upsert?: ProduitUpsertWithoutProduitsInput
    connect?: ProduitWhereUniqueInput
    update?: XOR<XOR<ProduitUpdateToOneWithWhereWithoutProduitsInput, ProduitUpdateWithoutProduitsInput>, ProduitUncheckedUpdateWithoutProduitsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FactureProduitCreateWithoutProduitInput = {
    quantite: number
    facture: FactureCreateNestedOneWithoutProduitsInput
  }

  export type FactureProduitUncheckedCreateWithoutProduitInput = {
    id?: number
    factureId: number
    quantite: number
  }

  export type FactureProduitCreateOrConnectWithoutProduitInput = {
    where: FactureProduitWhereUniqueInput
    create: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput>
  }

  export type FactureProduitCreateManyProduitInputEnvelope = {
    data: FactureProduitCreateManyProduitInput | FactureProduitCreateManyProduitInput[]
  }

  export type FactureProduitUpsertWithWhereUniqueWithoutProduitInput = {
    where: FactureProduitWhereUniqueInput
    update: XOR<FactureProduitUpdateWithoutProduitInput, FactureProduitUncheckedUpdateWithoutProduitInput>
    create: XOR<FactureProduitCreateWithoutProduitInput, FactureProduitUncheckedCreateWithoutProduitInput>
  }

  export type FactureProduitUpdateWithWhereUniqueWithoutProduitInput = {
    where: FactureProduitWhereUniqueInput
    data: XOR<FactureProduitUpdateWithoutProduitInput, FactureProduitUncheckedUpdateWithoutProduitInput>
  }

  export type FactureProduitUpdateManyWithWhereWithoutProduitInput = {
    where: FactureProduitScalarWhereInput
    data: XOR<FactureProduitUpdateManyMutationInput, FactureProduitUncheckedUpdateManyWithoutProduitInput>
  }

  export type FactureProduitScalarWhereInput = {
    AND?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
    OR?: FactureProduitScalarWhereInput[]
    NOT?: FactureProduitScalarWhereInput | FactureProduitScalarWhereInput[]
    id?: IntFilter<"FactureProduit"> | number
    factureId?: IntFilter<"FactureProduit"> | number
    produitId?: IntFilter<"FactureProduit"> | number
    quantite?: IntFilter<"FactureProduit"> | number
  }

  export type FactureProduitCreateWithoutFactureInput = {
    quantite: number
    produit: ProduitCreateNestedOneWithoutProduitsInput
  }

  export type FactureProduitUncheckedCreateWithoutFactureInput = {
    id?: number
    produitId: number
    quantite: number
  }

  export type FactureProduitCreateOrConnectWithoutFactureInput = {
    where: FactureProduitWhereUniqueInput
    create: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput>
  }

  export type FactureProduitCreateManyFactureInputEnvelope = {
    data: FactureProduitCreateManyFactureInput | FactureProduitCreateManyFactureInput[]
  }

  export type FactureProduitUpsertWithWhereUniqueWithoutFactureInput = {
    where: FactureProduitWhereUniqueInput
    update: XOR<FactureProduitUpdateWithoutFactureInput, FactureProduitUncheckedUpdateWithoutFactureInput>
    create: XOR<FactureProduitCreateWithoutFactureInput, FactureProduitUncheckedCreateWithoutFactureInput>
  }

  export type FactureProduitUpdateWithWhereUniqueWithoutFactureInput = {
    where: FactureProduitWhereUniqueInput
    data: XOR<FactureProduitUpdateWithoutFactureInput, FactureProduitUncheckedUpdateWithoutFactureInput>
  }

  export type FactureProduitUpdateManyWithWhereWithoutFactureInput = {
    where: FactureProduitScalarWhereInput
    data: XOR<FactureProduitUpdateManyMutationInput, FactureProduitUncheckedUpdateManyWithoutFactureInput>
  }

  export type FactureCreateWithoutProduitsInput = {
    date?: Date | string
  }

  export type FactureUncheckedCreateWithoutProduitsInput = {
    id?: number
    date?: Date | string
  }

  export type FactureCreateOrConnectWithoutProduitsInput = {
    where: FactureWhereUniqueInput
    create: XOR<FactureCreateWithoutProduitsInput, FactureUncheckedCreateWithoutProduitsInput>
  }

  export type ProduitCreateWithoutProduitsInput = {
    nom: string
    prix: number
    quantite: number
  }

  export type ProduitUncheckedCreateWithoutProduitsInput = {
    id?: number
    nom: string
    prix: number
    quantite: number
  }

  export type ProduitCreateOrConnectWithoutProduitsInput = {
    where: ProduitWhereUniqueInput
    create: XOR<ProduitCreateWithoutProduitsInput, ProduitUncheckedCreateWithoutProduitsInput>
  }

  export type FactureUpsertWithoutProduitsInput = {
    update: XOR<FactureUpdateWithoutProduitsInput, FactureUncheckedUpdateWithoutProduitsInput>
    create: XOR<FactureCreateWithoutProduitsInput, FactureUncheckedCreateWithoutProduitsInput>
    where?: FactureWhereInput
  }

  export type FactureUpdateToOneWithWhereWithoutProduitsInput = {
    where?: FactureWhereInput
    data: XOR<FactureUpdateWithoutProduitsInput, FactureUncheckedUpdateWithoutProduitsInput>
  }

  export type FactureUpdateWithoutProduitsInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FactureUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProduitUpsertWithoutProduitsInput = {
    update: XOR<ProduitUpdateWithoutProduitsInput, ProduitUncheckedUpdateWithoutProduitsInput>
    create: XOR<ProduitCreateWithoutProduitsInput, ProduitUncheckedCreateWithoutProduitsInput>
    where?: ProduitWhereInput
  }

  export type ProduitUpdateToOneWithWhereWithoutProduitsInput = {
    where?: ProduitWhereInput
    data: XOR<ProduitUpdateWithoutProduitsInput, ProduitUncheckedUpdateWithoutProduitsInput>
  }

  export type ProduitUpdateWithoutProduitsInput = {
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type ProduitUncheckedUpdateWithoutProduitsInput = {
    id?: IntFieldUpdateOperationsInput | number
    nom?: StringFieldUpdateOperationsInput | string
    prix?: FloatFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitCreateManyProduitInput = {
    id?: number
    factureId: number
    quantite: number
  }

  export type FactureProduitUpdateWithoutProduitInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    facture?: FactureUpdateOneRequiredWithoutProduitsNestedInput
  }

  export type FactureProduitUncheckedUpdateWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitUncheckedUpdateManyWithoutProduitInput = {
    id?: IntFieldUpdateOperationsInput | number
    factureId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitCreateManyFactureInput = {
    id?: number
    produitId: number
    quantite: number
  }

  export type FactureProduitUpdateWithoutFactureInput = {
    quantite?: IntFieldUpdateOperationsInput | number
    produit?: ProduitUpdateOneRequiredWithoutProduitsNestedInput
  }

  export type FactureProduitUncheckedUpdateWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }

  export type FactureProduitUncheckedUpdateManyWithoutFactureInput = {
    id?: IntFieldUpdateOperationsInput | number
    produitId?: IntFieldUpdateOperationsInput | number
    quantite?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}